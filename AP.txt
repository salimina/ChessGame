#ifndef ABSTRACT_PIECE_H
#define ABSTRACT_PIECE_H
#include <map>
#include <iostream>
#include <vector>
#include <memory>  // Include memory header for shared_ptr
#include "Board.h"
using namespace std;

class Board;
enum PieceColor {
    WHITE,
    BLACK
};

class AbstractPiece {
public:
    string name;
    PieceColor piececolor;
    Location location;

    AbstractPiece() {}

    AbstractPiece(PieceColor piececolorinput) : piececolor(piececolorinput) {}

    void setName(const string &pieceName) {
        name = pieceName;
    }

    string getName() {
        return name;
    }

    PieceColor getPieceColor() {
        return piececolor;
    }

    static std::string PieceColortoString(PieceColor piececolor) {
        switch (piececolor) {
            case WHITE: return "WHITE";
            case BLACK: return "BLACK";
            default: return "Unknown";
        }
    }

    Location build(Location current, int Fileoffset, int Rankoffset) {
        return Location(static_cast<File>(current.getFile() + Fileoffset), current.getRank() + static_cast<size_t>(Rankoffset));
    }

    virtual vector<Location> getValidMoves(Board &Gameboard) = 0;

    void possibleCandidates(vector<Location> &moveCandidates, Location &possibility, Location &current, Board &Gameboard) {
        map<Location, shared_ptr<AbstractPiece>> board = Gameboard.getLocationSquareMap();
        if (possibility.getRank() < 8 && possibility.getFile() < static_cast<File>(8)) {
            if (!board[possibility]) {
                moveCandidates.push_back(possibility);
            } else {
                if (board[possibility]->getPieceColor() != board[current]->getPieceColor()) {
                    moveCandidates.push_back(possibility);
                }
            }
        }
    }

    virtual std::shared_ptr<AbstractPiece> clone() const = 0;

    virtual ~AbstractPiece() {}

};

class Board;
class Pawn : public AbstractPiece {
public:
    bool isFirstMove = true;
    
    Pawn(PieceColor piececolorinput) : AbstractPiece(piececolorinput) {
        setName("Pawn");
    }

    std::shared_ptr<AbstractPiece> clone() const override {
        return std::make_shared<Pawn>(*this);
    }

    vector<Location> getValidMoves(Board &Gameboard) override{
        vector<Location> moveCandidates;
        map<Location, shared_ptr<AbstractPiece>> board = Gameboard.getLocationSquareMap();
        Location possibility = build(location, 0, 1);
        possibleCandidates(moveCandidates, possibility, location, Gameboard);
        if(isFirstMove){
            Location possibility = build(location, 0, 2);
            possibleCandidates(moveCandidates, possibility, location, Gameboard);
            // return moveCandidates;
            //shud it return?
        }
            possibility = build(location, 1, 1);
            possibleCandidates(moveCandidates, possibility, location, Gameboard);
            possibility = build(location, -1, 1);
            possibleCandidates(moveCandidates, possibility, location, Gameboard);
        
        return moveCandidates;
    }
};
class Board;
class Bishop : public AbstractPiece {
public:
    Bishop(PieceColor piececolorinput) : AbstractPiece(piececolorinput) {
        setName("Bishop");
    }

    std::shared_ptr<AbstractPiece> clone() const override {
        return std::make_shared<Bishop>(*this);
    }
    vector<Location> getValidMoves (Board &Gameboard)override{
        vector<Location> moveCandidates;
        map<Location, shared_ptr<AbstractPiece>> board = Gameboard.getLocationSquareMap();
        possibleCandidates(moveCandidates, board, location, 1, 1);
        possibleCandidates(moveCandidates, board, location, 1, -1);
        possibleCandidates(moveCandidates, board, location, -1, -1);
        possibleCandidates(moveCandidates, board, location, -1, 1);
        return moveCandidates;
    }

    void possibleCandidates(vector<Location> &moveCandidates,map<Location, shared_ptr<AbstractPiece>> &board, Location &current, int fileoffset, int rankoffset){
        Location next = build(current, fileoffset, rankoffset);
        auto it = board.find(next);
        while (it != board.end()){
            if (it->second){
                if (it->second->getPieceColor() == board[current]->getPieceColor()){
                    break;
                }
                moveCandidates.push_back(next);
                break;
            }
            moveCandidates.push_back(next);
            next = build(next, fileoffset, rankoffset);
        }
    }

};

class Board;
class Knight : public AbstractPiece {
public:
    Knight(PieceColor piececolorinput) : AbstractPiece(piececolorinput) {
        setName("Knight");
    }

    std::shared_ptr<AbstractPiece> clone() const override {
        return std::make_shared<Knight>(*this);
    }

    vector<Location> getValidMoves(Board &Gameboard) override{
        vector<Location> moveCandidates;
        Location possibility = build(location, 2, 1);
        possibleCandidates(moveCandidates, possibility, location, Gameboard);
        possibility = build(location, 2, -1);
        possibleCandidates(moveCandidates, possibility, location, Gameboard);
        possibility = build(location, -2, 1);
        possibleCandidates(moveCandidates, possibility, location, Gameboard);
        possibility = build(location, -2, -1);
        possibleCandidates(moveCandidates, possibility, location, Gameboard);
        possibility = build(location, 1, 2);
        possibleCandidates(moveCandidates, possibility, location, Gameboard);
        possibility = build(location, -1, 2);
        possibleCandidates(moveCandidates, possibility, location, Gameboard);
        possibility = build(location, 1, -2);
        possibleCandidates(moveCandidates, possibility, location, Gameboard);
        possibility = build(location, -1, -2);
        possibleCandidates(moveCandidates, possibility, location, Gameboard);
        return moveCandidates;
    }

};

class Board;
class Rook : public AbstractPiece {
public:
    Rook(PieceColor piececolorinput) : AbstractPiece(piececolorinput) {
        setName("Rook");
    }

    std::shared_ptr<AbstractPiece> clone() const override {
        return std::make_shared<Rook>(*this);
    }

    vector<Location> getValidMoves(Board &Gameboard) override{
        vector<Location> moveCandidates;
        map<Location, shared_ptr<AbstractPiece>> board = Gameboard.getLocationSquareMap();
        getRankCandidates(moveCandidates, board, location, -1);
        getRankCandidates(moveCandidates, board, location, 1);
        getFileCandidates(moveCandidates, board, location, -1);
        getFileCandidates(moveCandidates, board, location, 1);
        return moveCandidates;
    }

    void getRankCandidates(vector<Location> &moveCandidates, map<Location, shared_ptr<AbstractPiece>> &board, Location &current, int offset){
        Location next = build(current, current.getFile(), offset);
        auto it = board.find(next);
        while (it != board.end()){
            if (it->second){
                if (it->second->getPieceColor() == board[current]->getPieceColor()){
                    break;
                }
                moveCandidates.push_back(next);
                break;
            }
            moveCandidates.push_back(next);
            next = build(next, next.getFile(), offset);
        }
    }

    void getFileCandidates(vector<Location> &moveCandidates, map<Location, shared_ptr<AbstractPiece>> &board, Location &current, int offset){
        Location next = build(current, offset, static_cast<int>(current.getRank()));
        auto it = board.find(next);
        while (it != board.end()){
            if (it->second){
                if (it->second->getPieceColor() == board[current]->getPieceColor()){
                    break;
                }
                moveCandidates.push_back(next);
                break;
            }
            moveCandidates.push_back(next);
            next = build(next, offset, static_cast<int>(next.getRank()));
        }
    }
};

class Board;
class Queen : public AbstractPiece {
public:
    Queen(PieceColor piececolorinput) : AbstractPiece(piececolorinput) {
        setName("Queen");
    }

    std::shared_ptr<AbstractPiece> clone() const override {
        return std::make_shared<Queen>(*this);
    }

    vector<Location> getValidMoves(Board &board) override{
        vector<Location> moveCandidates;
        Bishop bishop (board.Gameboard[static_cast<size_t>(location.getFile())][location.getRank()]->getPieceColor());
        Rook rook(board.Gameboard[static_cast<size_t>(location.getFile())][location.getRank()]->getPieceColor());
        vector<Location> A = bishop.getValidMoves(board);
        vector<Location> B = rook.getValidMoves(board);
        moveCandidates.insert(moveCandidates.end(), A.begin(), A.end());
        moveCandidates.insert(moveCandidates.end(), B.begin(), B.end());
        return moveCandidates;
    }
};

class Board;
class King : public AbstractPiece {
public:
    King(PieceColor piececolorinput) : AbstractPiece(piececolorinput) {
        setName("King");
    }
    std::shared_ptr<AbstractPiece> clone() const override {
        return std::make_shared<King>(*this);
    }

    vector<Location> getValidMoves(Board &Gameboard) override{
        vector<Location> moveCandidates;
        Location possibility = build(location, 0, 1);
        possibleCandidates(moveCandidates, possibility, location, Gameboard);
        possibility = build(location, 0, -1);
        possibleCandidates(moveCandidates, possibility, location, Gameboard);
        possibility = build(location, 1, 0);
        possibleCandidates(moveCandidates, possibility, location, Gameboard);
        possibility = build(location, -1, 0);
        possibleCandidates(moveCandidates, possibility, location, Gameboard);
        possibility = build(location, -1, -1);
        possibleCandidates(moveCandidates, possibility, location, Gameboard);
        possibility = build(location, 1, 1);
        possibleCandidates(moveCandidates, possibility, location, Gameboard);
        possibility = build(location, 1, -1);
        possibleCandidates(moveCandidates, possibility, location, Gameboard);
        possibility = build(location, -1, 1);
        possibleCandidates(moveCandidates, possibility, location, Gameboard);
        return moveCandidates;
    }
};




#endif